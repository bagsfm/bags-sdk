// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: src/protos/launchpad_launch_event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "restream_events";

export enum SupportedLaunchpadEvent {
  UNKNOWN = 0,
  BAGS = 1,
  UNRECOGNIZED = -1,
}

export function supportedLaunchpadEventFromJSON(object: any): SupportedLaunchpadEvent {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return SupportedLaunchpadEvent.UNKNOWN;
    case 1:
    case "BAGS":
      return SupportedLaunchpadEvent.BAGS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SupportedLaunchpadEvent.UNRECOGNIZED;
  }
}

export function supportedLaunchpadEventToJSON(object: SupportedLaunchpadEvent): string {
  switch (object) {
    case SupportedLaunchpadEvent.UNKNOWN:
      return "UNKNOWN";
    case SupportedLaunchpadEvent.BAGS:
      return "BAGS";
    case SupportedLaunchpadEvent.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** launchpad_launch:{<launchpad> in SCREAMING_SNAKE_CASE} */
export interface LaunchpadLaunchEvent {
  /** unix timestamp (seconds) */
  timestamp: number;
  /** txn signature of the event */
  signature: string;
  /** slot of the event */
  slot: number;
  /** creator of the launch */
  creator: string;
  /** mint of the launch */
  mint: string;
  /** quote of the launch in the virtual curve */
  quote: string;
  /** name of the mint */
  name: string;
  /** symbol of the mint */
  symbol: string;
  /** uri of the mint */
  uri: string;
  /**
   * launch wallet of the launch - could be empty string if no launch wallet was
   * inferred
   */
  launchWallet: string;
  /** launchpad where the launch was created */
  launchpad: SupportedLaunchpadEvent;
}

function createBaseLaunchpadLaunchEvent(): LaunchpadLaunchEvent {
  return {
    timestamp: 0,
    signature: "",
    slot: 0,
    creator: "",
    mint: "",
    quote: "",
    name: "",
    symbol: "",
    uri: "",
    launchWallet: "",
    launchpad: 0,
  };
}

export const LaunchpadLaunchEvent: MessageFns<LaunchpadLaunchEvent> = {
  encode(message: LaunchpadLaunchEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== 0) {
      writer.uint32(8).int64(message.timestamp);
    }
    if (message.signature !== "") {
      writer.uint32(18).string(message.signature);
    }
    if (message.slot !== 0) {
      writer.uint32(24).uint64(message.slot);
    }
    if (message.creator !== "") {
      writer.uint32(34).string(message.creator);
    }
    if (message.mint !== "") {
      writer.uint32(42).string(message.mint);
    }
    if (message.quote !== "") {
      writer.uint32(50).string(message.quote);
    }
    if (message.name !== "") {
      writer.uint32(58).string(message.name);
    }
    if (message.symbol !== "") {
      writer.uint32(66).string(message.symbol);
    }
    if (message.uri !== "") {
      writer.uint32(74).string(message.uri);
    }
    if (message.launchWallet !== "") {
      writer.uint32(82).string(message.launchWallet);
    }
    if (message.launchpad !== 0) {
      writer.uint32(88).int32(message.launchpad);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LaunchpadLaunchEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLaunchpadLaunchEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.slot = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.mint = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.quote = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.symbol = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.launchWallet = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.launchpad = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LaunchpadLaunchEvent {
    return {
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      slot: isSet(object.slot) ? globalThis.Number(object.slot) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      mint: isSet(object.mint) ? globalThis.String(object.mint) : "",
      quote: isSet(object.quote) ? globalThis.String(object.quote) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      launchWallet: isSet(object.launchWallet) ? globalThis.String(object.launchWallet) : "",
      launchpad: isSet(object.launchpad) ? supportedLaunchpadEventFromJSON(object.launchpad) : 0,
    };
  },

  toJSON(message: LaunchpadLaunchEvent): unknown {
    const obj: any = {};
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    if (message.slot !== 0) {
      obj.slot = Math.round(message.slot);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.mint !== "") {
      obj.mint = message.mint;
    }
    if (message.quote !== "") {
      obj.quote = message.quote;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.launchWallet !== "") {
      obj.launchWallet = message.launchWallet;
    }
    if (message.launchpad !== 0) {
      obj.launchpad = supportedLaunchpadEventToJSON(message.launchpad);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LaunchpadLaunchEvent>, I>>(base?: I): LaunchpadLaunchEvent {
    return LaunchpadLaunchEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LaunchpadLaunchEvent>, I>>(object: I): LaunchpadLaunchEvent {
    const message = createBaseLaunchpadLaunchEvent();
    message.timestamp = object.timestamp ?? 0;
    message.signature = object.signature ?? "";
    message.slot = object.slot ?? 0;
    message.creator = object.creator ?? "";
    message.mint = object.mint ?? "";
    message.quote = object.quote ?? "";
    message.name = object.name ?? "";
    message.symbol = object.symbol ?? "";
    message.uri = object.uri ?? "";
    message.launchWallet = object.launchWallet ?? "";
    message.launchpad = object.launchpad ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
