// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: src/protos/swap_event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "restream_events";

/** swap:{token} */
export interface DexSwapEvent {
  /** The maker's address */
  maker: string;
  /** Transaction signature */
  signature: string;
  /** `From` token address */
  fromToken: string;
  /** `To` token address */
  toToken: string;
  /** `From` token decimals */
  fromDecimals: number;
  /** `To` token decimals */
  toDecimals: number;
  /** `From` token amount in base units */
  fromAmount: number;
  /** `To` token amount in base units */
  toAmount: number;
  /** `From` token price in USD */
  fromPriceUsd: number;
  /** `To` token price in USD */
  toPriceUsd: number;
  /** `From` token price in SOL */
  fromPriceSol: number;
  /** `To` token price in SOL */
  toPriceSol: number;
  /** `From` token product in USD (volume) */
  fromProductUsd: number;
  /** `To` token product in USD (volume) */
  toProductUsd: number;
  /** `From` token product in SOL (volume) */
  fromProductSol: number;
  /** `To` token product in SOL (volume) */
  toProductSol: number;
  /** DEX address */
  dex: string;
  /** Block slot number */
  slot: number;
  /** unix timestamp (seconds) */
  timestamp: number;
}

function createBaseDexSwapEvent(): DexSwapEvent {
  return {
    maker: "",
    signature: "",
    fromToken: "",
    toToken: "",
    fromDecimals: 0,
    toDecimals: 0,
    fromAmount: 0,
    toAmount: 0,
    fromPriceUsd: 0,
    toPriceUsd: 0,
    fromPriceSol: 0,
    toPriceSol: 0,
    fromProductUsd: 0,
    toProductUsd: 0,
    fromProductSol: 0,
    toProductSol: 0,
    dex: "",
    slot: 0,
    timestamp: 0,
  };
}

export const DexSwapEvent: MessageFns<DexSwapEvent> = {
  encode(message: DexSwapEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maker !== "") {
      writer.uint32(10).string(message.maker);
    }
    if (message.signature !== "") {
      writer.uint32(18).string(message.signature);
    }
    if (message.fromToken !== "") {
      writer.uint32(26).string(message.fromToken);
    }
    if (message.toToken !== "") {
      writer.uint32(34).string(message.toToken);
    }
    if (message.fromDecimals !== 0) {
      writer.uint32(40).uint32(message.fromDecimals);
    }
    if (message.toDecimals !== 0) {
      writer.uint32(48).uint32(message.toDecimals);
    }
    if (message.fromAmount !== 0) {
      writer.uint32(56).uint64(message.fromAmount);
    }
    if (message.toAmount !== 0) {
      writer.uint32(64).uint64(message.toAmount);
    }
    if (message.fromPriceUsd !== 0) {
      writer.uint32(81).double(message.fromPriceUsd);
    }
    if (message.toPriceUsd !== 0) {
      writer.uint32(89).double(message.toPriceUsd);
    }
    if (message.fromPriceSol !== 0) {
      writer.uint32(97).double(message.fromPriceSol);
    }
    if (message.toPriceSol !== 0) {
      writer.uint32(105).double(message.toPriceSol);
    }
    if (message.fromProductUsd !== 0) {
      writer.uint32(113).double(message.fromProductUsd);
    }
    if (message.toProductUsd !== 0) {
      writer.uint32(121).double(message.toProductUsd);
    }
    if (message.fromProductSol !== 0) {
      writer.uint32(129).double(message.fromProductSol);
    }
    if (message.toProductSol !== 0) {
      writer.uint32(137).double(message.toProductSol);
    }
    if (message.dex !== "") {
      writer.uint32(146).string(message.dex);
    }
    if (message.slot !== 0) {
      writer.uint32(152).uint64(message.slot);
    }
    if (message.timestamp !== 0) {
      writer.uint32(160).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DexSwapEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDexSwapEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.maker = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fromToken = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.toToken = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.fromDecimals = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.toDecimals = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.fromAmount = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.toAmount = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 81) {
            break;
          }

          message.fromPriceUsd = reader.double();
          continue;
        }
        case 11: {
          if (tag !== 89) {
            break;
          }

          message.toPriceUsd = reader.double();
          continue;
        }
        case 12: {
          if (tag !== 97) {
            break;
          }

          message.fromPriceSol = reader.double();
          continue;
        }
        case 13: {
          if (tag !== 105) {
            break;
          }

          message.toPriceSol = reader.double();
          continue;
        }
        case 14: {
          if (tag !== 113) {
            break;
          }

          message.fromProductUsd = reader.double();
          continue;
        }
        case 15: {
          if (tag !== 121) {
            break;
          }

          message.toProductUsd = reader.double();
          continue;
        }
        case 16: {
          if (tag !== 129) {
            break;
          }

          message.fromProductSol = reader.double();
          continue;
        }
        case 17: {
          if (tag !== 137) {
            break;
          }

          message.toProductSol = reader.double();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.dex = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.slot = longToNumber(reader.uint64());
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DexSwapEvent {
    return {
      maker: isSet(object.maker) ? globalThis.String(object.maker) : "",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      fromToken: isSet(object.fromToken) ? globalThis.String(object.fromToken) : "",
      toToken: isSet(object.toToken) ? globalThis.String(object.toToken) : "",
      fromDecimals: isSet(object.fromDecimals) ? globalThis.Number(object.fromDecimals) : 0,
      toDecimals: isSet(object.toDecimals) ? globalThis.Number(object.toDecimals) : 0,
      fromAmount: isSet(object.fromAmount) ? globalThis.Number(object.fromAmount) : 0,
      toAmount: isSet(object.toAmount) ? globalThis.Number(object.toAmount) : 0,
      fromPriceUsd: isSet(object.fromPriceUsd) ? globalThis.Number(object.fromPriceUsd) : 0,
      toPriceUsd: isSet(object.toPriceUsd) ? globalThis.Number(object.toPriceUsd) : 0,
      fromPriceSol: isSet(object.fromPriceSol) ? globalThis.Number(object.fromPriceSol) : 0,
      toPriceSol: isSet(object.toPriceSol) ? globalThis.Number(object.toPriceSol) : 0,
      fromProductUsd: isSet(object.fromProductUsd) ? globalThis.Number(object.fromProductUsd) : 0,
      toProductUsd: isSet(object.toProductUsd) ? globalThis.Number(object.toProductUsd) : 0,
      fromProductSol: isSet(object.fromProductSol) ? globalThis.Number(object.fromProductSol) : 0,
      toProductSol: isSet(object.toProductSol) ? globalThis.Number(object.toProductSol) : 0,
      dex: isSet(object.dex) ? globalThis.String(object.dex) : "",
      slot: isSet(object.slot) ? globalThis.Number(object.slot) : 0,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
    };
  },

  toJSON(message: DexSwapEvent): unknown {
    const obj: any = {};
    if (message.maker !== "") {
      obj.maker = message.maker;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    if (message.fromToken !== "") {
      obj.fromToken = message.fromToken;
    }
    if (message.toToken !== "") {
      obj.toToken = message.toToken;
    }
    if (message.fromDecimals !== 0) {
      obj.fromDecimals = Math.round(message.fromDecimals);
    }
    if (message.toDecimals !== 0) {
      obj.toDecimals = Math.round(message.toDecimals);
    }
    if (message.fromAmount !== 0) {
      obj.fromAmount = Math.round(message.fromAmount);
    }
    if (message.toAmount !== 0) {
      obj.toAmount = Math.round(message.toAmount);
    }
    if (message.fromPriceUsd !== 0) {
      obj.fromPriceUsd = message.fromPriceUsd;
    }
    if (message.toPriceUsd !== 0) {
      obj.toPriceUsd = message.toPriceUsd;
    }
    if (message.fromPriceSol !== 0) {
      obj.fromPriceSol = message.fromPriceSol;
    }
    if (message.toPriceSol !== 0) {
      obj.toPriceSol = message.toPriceSol;
    }
    if (message.fromProductUsd !== 0) {
      obj.fromProductUsd = message.fromProductUsd;
    }
    if (message.toProductUsd !== 0) {
      obj.toProductUsd = message.toProductUsd;
    }
    if (message.fromProductSol !== 0) {
      obj.fromProductSol = message.fromProductSol;
    }
    if (message.toProductSol !== 0) {
      obj.toProductSol = message.toProductSol;
    }
    if (message.dex !== "") {
      obj.dex = message.dex;
    }
    if (message.slot !== 0) {
      obj.slot = Math.round(message.slot);
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DexSwapEvent>, I>>(base?: I): DexSwapEvent {
    return DexSwapEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DexSwapEvent>, I>>(object: I): DexSwapEvent {
    const message = createBaseDexSwapEvent();
    message.maker = object.maker ?? "";
    message.signature = object.signature ?? "";
    message.fromToken = object.fromToken ?? "";
    message.toToken = object.toToken ?? "";
    message.fromDecimals = object.fromDecimals ?? 0;
    message.toDecimals = object.toDecimals ?? 0;
    message.fromAmount = object.fromAmount ?? 0;
    message.toAmount = object.toAmount ?? 0;
    message.fromPriceUsd = object.fromPriceUsd ?? 0;
    message.toPriceUsd = object.toPriceUsd ?? 0;
    message.fromPriceSol = object.fromPriceSol ?? 0;
    message.toPriceSol = object.toPriceSol ?? 0;
    message.fromProductUsd = object.fromProductUsd ?? 0;
    message.toProductUsd = object.toProductUsd ?? 0;
    message.fromProductSol = object.fromProductSol ?? 0;
    message.toProductSol = object.toProductSol ?? 0;
    message.dex = object.dex ?? "";
    message.slot = object.slot ?? 0;
    message.timestamp = object.timestamp ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
