// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: src/protos/maker_action_event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "restream_events";

export enum MakerActionType {
  BUY = 0,
  SELL = 1,
  UNRECOGNIZED = -1,
}

export function makerActionTypeFromJSON(object: any): MakerActionType {
  switch (object) {
    case 0:
    case "BUY":
      return MakerActionType.BUY;
    case 1:
    case "SELL":
      return MakerActionType.SELL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MakerActionType.UNRECOGNIZED;
  }
}

export function makerActionTypeToJSON(object: MakerActionType): string {
  switch (object) {
    case MakerActionType.BUY:
      return "BUY";
    case MakerActionType.SELL:
      return "SELL";
    case MakerActionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** maker_action:{maker_pk} */
export interface MakerActionEvent {
  /** The maker's address */
  maker: string;
  /** The maker's action type */
  action: MakerActionType;
  /** Transaction signature */
  signature: string;
  /** Token address */
  token: string;
  /** Token decimals */
  decimals: number;
  /** Token amount in base units */
  amount: number;
  /** Token price in USD */
  priceUsd: number;
  /** Token price in USD */
  priceSol: number;
  /** `From` token product in USD (volume) */
  productUsd: number;
  /** `To` token product in USD (volume) */
  productSol: number;
  /** DEX address */
  dex: string;
  /** Block slot number */
  slot: number;
  /** unix timestamp (seconds) */
  timestamp: number;
}

function createBaseMakerActionEvent(): MakerActionEvent {
  return {
    maker: "",
    action: 0,
    signature: "",
    token: "",
    decimals: 0,
    amount: 0,
    priceUsd: 0,
    priceSol: 0,
    productUsd: 0,
    productSol: 0,
    dex: "",
    slot: 0,
    timestamp: 0,
  };
}

export const MakerActionEvent: MessageFns<MakerActionEvent> = {
  encode(message: MakerActionEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maker !== "") {
      writer.uint32(10).string(message.maker);
    }
    if (message.action !== 0) {
      writer.uint32(16).int32(message.action);
    }
    if (message.signature !== "") {
      writer.uint32(26).string(message.signature);
    }
    if (message.token !== "") {
      writer.uint32(34).string(message.token);
    }
    if (message.decimals !== 0) {
      writer.uint32(40).uint32(message.decimals);
    }
    if (message.amount !== 0) {
      writer.uint32(48).uint64(message.amount);
    }
    if (message.priceUsd !== 0) {
      writer.uint32(57).double(message.priceUsd);
    }
    if (message.priceSol !== 0) {
      writer.uint32(65).double(message.priceSol);
    }
    if (message.productUsd !== 0) {
      writer.uint32(73).double(message.productUsd);
    }
    if (message.productSol !== 0) {
      writer.uint32(81).double(message.productSol);
    }
    if (message.dex !== "") {
      writer.uint32(90).string(message.dex);
    }
    if (message.slot !== 0) {
      writer.uint32(96).uint64(message.slot);
    }
    if (message.timestamp !== 0) {
      writer.uint32(104).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MakerActionEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMakerActionEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.maker = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.decimals = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.priceUsd = reader.double();
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.priceSol = reader.double();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.productUsd = reader.double();
          continue;
        }
        case 10: {
          if (tag !== 81) {
            break;
          }

          message.productSol = reader.double();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.dex = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.slot = longToNumber(reader.uint64());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MakerActionEvent {
    return {
      maker: isSet(object.maker) ? globalThis.String(object.maker) : "",
      action: isSet(object.action) ? makerActionTypeFromJSON(object.action) : 0,
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      decimals: isSet(object.decimals) ? globalThis.Number(object.decimals) : 0,
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      priceUsd: isSet(object.priceUsd) ? globalThis.Number(object.priceUsd) : 0,
      priceSol: isSet(object.priceSol) ? globalThis.Number(object.priceSol) : 0,
      productUsd: isSet(object.productUsd) ? globalThis.Number(object.productUsd) : 0,
      productSol: isSet(object.productSol) ? globalThis.Number(object.productSol) : 0,
      dex: isSet(object.dex) ? globalThis.String(object.dex) : "",
      slot: isSet(object.slot) ? globalThis.Number(object.slot) : 0,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
    };
  },

  toJSON(message: MakerActionEvent): unknown {
    const obj: any = {};
    if (message.maker !== "") {
      obj.maker = message.maker;
    }
    if (message.action !== 0) {
      obj.action = makerActionTypeToJSON(message.action);
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.decimals !== 0) {
      obj.decimals = Math.round(message.decimals);
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.priceUsd !== 0) {
      obj.priceUsd = message.priceUsd;
    }
    if (message.priceSol !== 0) {
      obj.priceSol = message.priceSol;
    }
    if (message.productUsd !== 0) {
      obj.productUsd = message.productUsd;
    }
    if (message.productSol !== 0) {
      obj.productSol = message.productSol;
    }
    if (message.dex !== "") {
      obj.dex = message.dex;
    }
    if (message.slot !== 0) {
      obj.slot = Math.round(message.slot);
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MakerActionEvent>, I>>(base?: I): MakerActionEvent {
    return MakerActionEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MakerActionEvent>, I>>(object: I): MakerActionEvent {
    const message = createBaseMakerActionEvent();
    message.maker = object.maker ?? "";
    message.action = object.action ?? 0;
    message.signature = object.signature ?? "";
    message.token = object.token ?? "";
    message.decimals = object.decimals ?? 0;
    message.amount = object.amount ?? 0;
    message.priceUsd = object.priceUsd ?? 0;
    message.priceSol = object.priceSol ?? 0;
    message.productUsd = object.productUsd ?? 0;
    message.productSol = object.productSol ?? 0;
    message.dex = object.dex ?? "";
    message.slot = object.slot ?? 0;
    message.timestamp = object.timestamp ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
